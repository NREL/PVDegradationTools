name: nbval

on: [pull_request]

env:
  BATCH_SIZE: 4

jobs:
  calculate-batches:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      notebooks: ${{ steps.set-matrix.outputs.notebooks }}
    env:
      ALL_NOTEBOOKS: |
        "1 - Basics, Humidity, Design.ipynb"
        "2 - Degradation.ipynb"
        "3 - Spectral Degradation.ipynb"
        "4 - Weather Database Access.ipynb"
        "ASTM Live Demo.ipynb"
        "B-O LID - Accelerated Test.ipynb"
        "Custom-Functions-Nopython.ipynb"
        "LETID - Accelerated Test.ipynb"
        "LETID - Outdoor LETID.ipynb"
        "LETID - Outdoor Scenario Based on Accelerated Test Result.ipynb"
        "LETID - Passivated Wafer.ipynb"
        "Monte Carlo - Arrhenius.ipynb"
        "Monte Carlo - Standoff.ipynb"
        "Pysam - Single Location.ipynb"
        "Tools - Edge Seal Oxygen Ingress.ipynb"
        "Van't Hoff Degradation Model.ipynb"
        "Geospatial - Local Scenario.ipynb"
    steps:
      - name: Calculate batch matrix
        id: set-matrix
        run: |
          # Count notebooks
          NOTEBOOK_COUNT=$(echo "$ALL_NOTEBOOKS" | sed 's/^[[:space:]]*//' | grep -v '^$' | wc -l)
          BATCH_COUNT=$(( (NOTEBOOK_COUNT + BATCH_SIZE - 1) / BATCH_SIZE ))

          # Generate matrix array [1, 2, 3, ...] as proper JSON
          BATCHES="["
          for i in $(seq 1 $BATCH_COUNT); do
            if [ $i -gt 1 ]; then
              BATCHES="$BATCHES,"
            fi
            BATCHES="$BATCHES$i"
          done
          BATCHES="$BATCHES]"

          echo "matrix={\"batch\":$BATCHES}" >> $GITHUB_OUTPUT
          echo "notebooks<<EOF" >> $GITHUB_OUTPUT
          echo "$ALL_NOTEBOOKS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Will create $BATCH_COUNT batches for $NOTEBOOK_COUNT notebooks"

  notebook-check:
    needs: calculate-batches
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.calculate-batches.outputs.matrix) }}
    env:
      NOTEBOOK_DIR: "tutorials_and_tools/tutorials_and_tools"
      SANITIZE_CFG: "nbval_sanitization_rules.cfg"
      ALL_NOTEBOOKS: ${{ needs.calculate-batches.outputs.notebooks }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('tutorials_and_tools/requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install notebook environment
        run: |
          python -m pip install --upgrade pip wheel
          pip install --timeout=300 -r tutorials_and_tools/requirements.txt
          pip install --timeout=300 -e .[test]
          pip install nbval global_land_mask dotenv imageio nrel-pysam
          pip install nbconvert[webpdf]

      - name: Set batch notebooks
        run: |
          # Convert the ALL_NOTEBOOKS env var into an array, handling quoted strings properly
          readarray -t ALL_NOTEBOOK_ARRAY < <(echo "$ALL_NOTEBOOKS" | sed 's/^[[:space:]]*//' | grep -v '^$' | sed 's/^"\(.*\)"$/\1/')

          # Use workflow-level BATCH_SIZE (4 notebooks per batch)
          BATCH_NUM=${{ matrix.batch }}
          START_INDEX=$(( (BATCH_NUM - 1) * BATCH_SIZE ))
          END_INDEX=$(( START_INDEX + BATCH_SIZE - 1 ))

          # Extract notebooks for this batch
          BATCH_NOTEBOOKS=()
          for i in $(seq $START_INDEX $END_INDEX); do
            if [ $i -lt ${#ALL_NOTEBOOK_ARRAY[@]} ]; then
              BATCH_NOTEBOOKS+=("${ALL_NOTEBOOK_ARRAY[$i]}")
            fi
          done

          # Convert array to newline-separated format for environment variable
          printf '%s\n' "${BATCH_NOTEBOOKS[@]}" > /tmp/batch_notebooks.txt
          echo "BATCH_NOTEBOOKS_FILE=/tmp/batch_notebooks.txt" >> $GITHUB_ENV

          echo "Batch $BATCH_NUM will process notebooks: ${BATCH_NOTEBOOKS[*]}"

      - name: Run batch notebooks with nbval
        run: |
          # Read notebooks from file to handle spaces properly
          readarray -t NOTEBOOK_ARRAY < "$BATCH_NOTEBOOKS_FILE"

          # Prepend the NOTEBOOK_DIR path to each notebook name
          FULL_PATHS=()
          for notebook in "${NOTEBOOK_ARRAY[@]}"; do
            if [ -n "$notebook" ]; then  # Skip empty lines
              FULL_PATHS+=("$NOTEBOOK_DIR/$notebook")
            fi
          done

          # Execute pytest with the batch of notebooks
          echo "Testing batch ${{ matrix.batch }} notebooks: ${FULL_PATHS[*]}"
          pytest --nbval \
                 --nbval-sanitize-with "$SANITIZE_CFG" \
                 "${FULL_PATHS[@]}"
