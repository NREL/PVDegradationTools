import pytest
from pvdeg import letid, utilities, collection, TEST_DIR, DATA_DIR
import os
import pandas as pd
import numpy as np

# do we need the below
from scipy.constants import convert_temperature, elementary_charge, Boltzmann 
from scipy.integrate import simpson
import datetime
# do we need the above

# from LETID - Passivated Wafer.ipynb


def test_tau_now():
# from LETID - Passivated Wafer.ipynb
    tau_0 = 350 # us 
    tau_deg = 41 # us
    nB_0 = 0

    result = letid.tau_now(tau_0, tau_deg, nB_0)

    assert result == 350.0

def test_k_ij():
# from LETID - Passivated Wafer.ipynb
    mechanism_params = utilities.get_kinetics('repins')
    temperature = 49 # Â°C

    result = letid.k_ij(mechanism_params['v_ab'], mechanism_params['ea_ab'], temperature)

    # ABS value here?
    assert result == pytest.approx(5.389713113272726e-06)

def test_carrier_factor():
    pass

def test_carrier_factor_wafer():
# from LETID - Passivated Wafer.ipynb
    wafer_thickness = 180 # um
    tau = 350 # us, lifetime of the wafer for demonstration purposes
    mechanism_params = utilities.get_kinetics('repins')
    injection = 0.5 # 
    transition = 'bc' # for this example we'll look at the B -> C transition

    generation_df = pd.read_excel(os.path.join(DATA_DIR, 'PVL_GenProfile.xlsx'), header = 0) # this is an optical generation profile generated by PVLighthouse's OPAL2 default model for 1-sun, normal incident AM1.5 sunlight on a 180-um thick SiNx-coated, pyramid-textured wafer.
    generation = generation_df['Generation (cm-3s-1)']
    depth = generation_df['Depth (um)']
    j_gen = collection.generation_current(generation, depth)

    result = letid.carrier_factor_wafer(tau, transition, injection, j_gen, wafer_thickness, mechanism_params)

    assert result == pytest.approx(4.711029107876425, abs=0.000005)

def test_calc_dn():
# from LETID - Passivated Wafer.ipynb
    transition = 'bc' # for this example we'll look at the B -> C transition

    mechanism_params = utilities.get_kinetics('repins')
    meas_tau = mechanism_params[f"tau_{transition}"]
    meas_temp = mechanism_params[f"temperature_{transition}"]
    meas_temp = convert_temperature(meas_temp, 'K', 'C')
    meas_suns = mechanism_params[f"suns_{transition}"]
    meas_jsc = 40
    meas_wafer_thickness = mechanism_params[f"thickness_{transition}"]
    meas_srv = mechanism_params[f"srv_{transition}"]

    result = letid.calc_dn(
                        meas_tau,
                        meas_temp,
                        meas_suns,
                        meas_jsc,
                        wafer_thickness=meas_wafer_thickness,
                        s_rear=meas_srv,
                    )

    # What should the abs value be here, LARGE MAGNITUDE ANSWER
    assert result == pytest.approx(7.064647199192719e+20) 

def test_convert_i_to_v():
    pass

def test_j0_gray():
    pass

def test_calc_voc_from_tau():
    pass

def test_calc_device_params():
    pass

def test_calc_energy_loss():
    pass

def test_calc_regeneration_time():
    pass

def test_calc_pmp_loss_from_tau_loss():
    pass

def test_calc_ndd():
    pass

def test_ff_green():
    pass

def test_calc_injection_outdoors():
    pass

def test_calc_letid_outdoors():
    pass

def test_calc_letid_lab():
    pass