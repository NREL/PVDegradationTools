import pytest
from pvdeg import letid, utilities, collection, TEST_DIR, DATA_DIR, TEST_DATA_DIR
import os
import pandas as pd
import numpy as np

# do we need the below
from scipy.constants import convert_temperature, elementary_charge, Boltzmann 
from scipy.integrate import simpson
import datetime
# do we need the above

# Some of the assertions may have questionable error/abs values that cause the tests to fail
# Some are left blank for now, may cause problems

DEVICE_PARAMS = pd.read_csv(
    os.path.join(TEST_DATA_DIR, r"letid-device-params.csv"),
    index_col=0,
    parse_dates=True
)

TIMESTEPS = pd.read_csv(
    os.path.join(TEST_DATA_DIR, r"letid-timesteps.csv"),
    index_col=0
)


def test_tau_now():
# from LETID - Passivated Wafer.ipynb
    tau_0 = 350 # us 
    tau_deg = 41 # us
    nB_0 = 0

    result = letid.tau_now(tau_0, tau_deg, nB_0)

    assert result == 350.0

def test_k_ij():
# from LETID - Passivated Wafer.ipynb
    mechanism_params = utilities.get_kinetics('repins')
    temperature = 49 # Â°C

    result = letid.k_ij(mechanism_params['v_ab'], mechanism_params['ea_ab'], temperature)

    # ABS value here?
    assert result == pytest.approx(5.389713113272726e-06)

def test_carrier_factor():
    pass

def test_carrier_factor_wafer():
# from LETID - Passivated Wafer.ipynb
    wafer_thickness = 180 # um
    tau = 350 # us, lifetime of the wafer for demonstration purposes
    mechanism_params = utilities.get_kinetics('repins')
    injection = 0.5 # 
    transition = 'bc' # for this example we'll look at the B -> C transition

    generation_df = pd.read_excel(os.path.join(DATA_DIR, 'PVL_GenProfile.xlsx'), header = 0) # this is an optical generation profile generated by PVLighthouse's OPAL2 default model for 1-sun, normal incident AM1.5 sunlight on a 180-um thick SiNx-coated, pyramid-textured wafer.
    generation = generation_df['Generation (cm-3s-1)']
    depth = generation_df['Depth (um)']
    j_gen = collection.generation_current(generation, depth)

    result = letid.carrier_factor_wafer(tau, transition, injection, j_gen, wafer_thickness, mechanism_params)

    assert result == pytest.approx(4.711029107876425, abs=0.000005)

def test_calc_dn():
# from LETID - Passivated Wafer.ipynb
    transition = 'bc' # for this example we'll look at the B -> C transition

    mechanism_params = utilities.get_kinetics('repins')
    meas_tau = mechanism_params[f"tau_{transition}"]
    meas_temp = mechanism_params[f"temperature_{transition}"]
    meas_temp = convert_temperature(meas_temp, 'K', 'C')
    meas_suns = mechanism_params[f"suns_{transition}"]
    meas_jsc = 40
    meas_wafer_thickness = mechanism_params[f"thickness_{transition}"]
    meas_srv = mechanism_params[f"srv_{transition}"]

    result = letid.calc_dn(
                        meas_tau,
                        meas_temp,
                        meas_suns,
                        meas_jsc,
                        wafer_thickness=meas_wafer_thickness,
                        s_rear=meas_srv,
                    )

    # What should the abs value be here, LARGE MAGNITUDE ANSWER
    assert result == pytest.approx(7.064647199192719e+20) 

def test_convert_i_to_v():
    pass

def test_j0_gray():
    pass

def test_calc_voc_from_tau():
    tau_1 = 115.000000
    tau_2 = 60.631208
    wafer_thickness = 180
    s_rear = 46
    jsc_now = 41.28092915355781
    temperature = 25

    result_1 = letid.calc_voc_from_tau(tau_1, wafer_thickness, s_rear, jsc_now, temperature)
    result_2 = letid.calc_voc_from_tau(tau_2, wafer_thickness, s_rear, jsc_now, temperature)

    assert result_1 == pytest.approx(0.6661350284244034, abs = 5e-8 )
    assert result_2 == pytest.approx(0.6531169204120689, abs = 5e-8)

def test_calc_device_params():

    results = letid.calc_device_params(TIMESTEPS, cell_area = 243)

    assert pd.testing.assert_frame_equal(results, DEVICE_PARAMS)

def test_calc_energy_loss():
    pass

def test_calc_regeneration_time():
    pass

def test_calc_pmp_loss_from_tau_loss():
# from B-O LID - Accelerated Test.ipynb

    wafer_thickness = 180 # um
    s_rear = 46 # cm/s
    cell_area = 243 # cm^2
    tau_0 = 115 # us, carrier lifetime in non-degraded states, e.g. LETID/LID states A or C
    tau_deg = 55 # us, carrier lifetime in fully-degraded state, e.g. LETID/LID state B

    result = letid.calc_pmp_loss_from_tau_loss(tau_0, tau_deg, cell_area, wafer_thickness, s_rear) # returns % power loss, pmp_0, pmp_deg

    # are these ABS values reasonable? 
    assert result[0] == pytest.approx(0.03495240755084558, abs = 5e-8)
    assert result[1] == pytest.approx(5.663466529792824, abs = 5e-8)
    assert result[2] == pytest.approx(5.465514739492932, abs = 5e-8)

def test_calc_ndd():
    pass

def test_ff_green():
    pass

def test_calc_injection_outdoors():
    pass

def test_calc_letid_outdoors():
    pass

def test_calc_letid_lab():
    pass